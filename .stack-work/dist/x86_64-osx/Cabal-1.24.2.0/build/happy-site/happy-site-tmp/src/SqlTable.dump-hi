
==================== FINAL INTERFACE ====================
2017-06-13 20:04:48.281839 UTC

interface main@main:SqlTable 8002
  interface hash: 8f47f5a0eb763fffc9282d9e55f4e03f
  ABI hash: 7f850554c491afd9f3bcff6890fe26c0
  export-list hash: 4e9e2985f407df8c1b2c872d59e2bdd1
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 390d938806707a616116230b7bfec37c
  sig of: Nothing
  used TH splices: True
  where
exports:
  SqlTable.createDatabase
  SqlTable.createItems
  SqlTable.fillDatabase
  SqlTable.fname
  SqlTable.getCount
  SqlTable.getItem
  SqlTable.getItemQ
  SqlTable.getRandItem
  SqlTable.getRandItems
  SqlTable.insertItemQ
  SqlTable.stripS
  SqlTable.tblname
  SqlTable.DuplicateData{SqlTable.DuplicateData}
  SqlTable.Item{SqlTable.Item content itemId}
module dependencies:
package dependencies: MissingH-1.4.0.1@MissingH-1.4.0.1-DyyJvfCR4dPGfXtWKVxn75
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-DRMYON11vLW10yp1r3HlfE
                      base-4.9.1.0 binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-CGB8BvrFgghHy5bLy0SFOg
                      blaze-textual-0.2.1.0@blaze-textual-0.2.1.0-GUQiYWWxIi0L6FRzgIE5JF
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      direct-sqlite-2.3.19@direct-sqlite-2.3.19-HHlUsN8cUcIK9krg9k4o1U
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.1@integer-logarithms-1.0.1-IEHCuEd5sG4JjSjlx7m5JF
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      raw-strings-qq-1.1@raw-strings-qq-1.1-HjO0jIPgyz3nrMVQqTSCs
                      regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa
                      regex-compat-0.95.1@regex-compat-0.95.1-7IGKoiHTSKL3opdpEZ0pO8
                      regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO
                      scientific-0.3.4.15@scientific-0.3.4.15-8KhnwsMCJdHAmYurRJsTmW
                      sqlite-simple-0.4.13.0@sqlite-simple-0.4.13.0-FwjAbqA5qVV8VDHxpvCP7M
                      template-haskell-2.11.1.0
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-DRMYON11vLW10yp1r3HlfE:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.0@hashable-1.2.6.0-3EXxoqeEgbfAKr6aGkye6x:Data.Hashable.Generic
         regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa:Text.Regex.Base.Context
         regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO:Text.Regex.Posix.String
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-DRMYON11vLW10yp1r3HlfE:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
import  -/  MissingH-1.4.0.1@MissingH-1.4.0.1-DyyJvfCR4dPGfXtWKVxn75:Data.String.Utils 26b376a398988ec250954ca470cdf072
import  -/  base-4.9.1.0:Control.Exception a76dd9666251322fe34dbcca3a0817bf
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Char 01433d23661edb6e5ef1536ef1e6774c
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:Data.Typeable 9257e47d10882145c67c5b489965cfb7
import  -/  base-4.9.1.0:Data.Typeable.Internal 0e9bdefa4325a0112d8e73b5e1e1f85d
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Exception e38fa3e73d54022fb9e3ce06477dfd07
import  -/  base-4.9.1.0:GHC.IO eb504c57b397cf133849f8586f15dafb
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:GHC.Unicode a175ecf20bf1272d9ae31337e7da43ab
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 318df275d77dcdb18e0006d8d7870c2a
import  -/  random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog:System.Random cc3ef358c669b194cf9fe94db6f2430f
import  -/  raw-strings-qq-1.1@raw-strings-qq-1.1-HjO0jIPgyz3nrMVQqTSCs:Text.RawString.QQ 049903e110b50d2e2afc78f5648fcd4b
import  -/  sqlite-simple-0.4.13.0@sqlite-simple-0.4.13.0-FwjAbqA5qVV8VDHxpvCP7M:Database.SQLite.Simple fc5aee74286aad0d0146cc0d19db896b
import  -/  sqlite-simple-0.4.13.0@sqlite-simple-0.4.13.0-FwjAbqA5qVV8VDHxpvCP7M:Database.SQLite.Simple.FromRow d2a34e72f06207ff65705df17a09b616
import  -/  sqlite-simple-0.4.13.0@sqlite-simple-0.4.13.0-FwjAbqA5qVV8VDHxpvCP7M:Database.SQLite.Simple.Internal d7cfae81079d8b73bb6a6291189d5931
import  -/  sqlite-simple-0.4.13.0@sqlite-simple-0.4.13.0-FwjAbqA5qVV8VDHxpvCP7M:Database.SQLite.Simple.ToRow 99278e0ea3ec295236528cf626653221
import  -/  sqlite-simple-0.4.13.0@sqlite-simple-0.4.13.0-FwjAbqA5qVV8VDHxpvCP7M:Database.SQLite.Simple.Types 4ae729fe6b9a6af28602bb5cdd5316c9
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text 02cbbc20bdd508fabc38de38896bbae0
import  -/  text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Internal a2f6f66c5bb1247458d9fa25257ab188
d9a1587c3d6484f5f39620f966997ba9
  $fEqDuplicateData :: GHC.Classes.Eq SqlTable.DuplicateData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SqlTable.DuplicateData
                  SqlTable.$fEqDuplicateData_$c==
                  SqlTable.$fEqDuplicateData_$c/= -}
d9a1587c3d6484f5f39620f966997ba9
  $fEqDuplicateData_$c/= ::
    SqlTable.DuplicateData -> SqlTable.DuplicateData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: SqlTable.DuplicateData) (b :: SqlTable.DuplicateData) ->
                 case a of wild { SqlTable.DuplicateData ->
                 case b of wild1 { SqlTable.DuplicateData -> GHC.Types.False } }) -}
d9a1587c3d6484f5f39620f966997ba9
  $fEqDuplicateData_$c== ::
    SqlTable.DuplicateData -> SqlTable.DuplicateData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: SqlTable.DuplicateData)
                   (ds1 :: SqlTable.DuplicateData) ->
                 case ds of wild { SqlTable.DuplicateData ->
                 case ds1 of wild1 { SqlTable.DuplicateData ->
                 GHC.Types.True } }) -}
d9a1587c3d6484f5f39620f966997ba9
  $fExceptionDuplicateData ::
    GHC.Exception.Exception SqlTable.DuplicateData
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SqlTable.DuplicateData
                  SqlTable.$fExceptionDuplicateData_$cp1Exception
                  SqlTable.$fShowDuplicateData
                  SqlTable.$fExceptionDuplicateData_$ctoException
                  SqlTable.$fExceptionDuplicateData_$cfromException
                  SqlTable.$fExceptionDuplicateData_$cdisplayException -}
6346a3d3da4f0b678e3f037dfa913ed0
  $fExceptionDuplicateData1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DuplicateData"#) -}
ed704922465f7d3f525676aab4219af7
  $fExceptionDuplicateData2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           SqlTable.$fExceptionDuplicateData3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   SqlTable.$tcDuplicateData
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
b476751fe65ed4ddf6b846d1ed954dcb
  $fExceptionDuplicateData3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   5711934299837864907##
                   17408807711959347684##) -}
d9a1587c3d6484f5f39620f966997ba9
  $fExceptionDuplicateData4 ::
    GHC.Prim.Proxy# SqlTable.DuplicateData
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# SqlTable.DuplicateData) ->
                 SqlTable.$fExceptionDuplicateData2) -}
d9a1587c3d6484f5f39620f966997ba9
  $fExceptionDuplicateData_$cdisplayException ::
    SqlTable.DuplicateData -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (0, True, True)
                SqlTable.$fExceptionDuplicateData_$cshow -}
d9a1587c3d6484f5f39620f966997ba9
  $fExceptionDuplicateData_$cfromException ::
    GHC.Exception.SomeException
    -> GHC.Base.Maybe SqlTable.DuplicateData
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (eta :: GHC.Exception.SomeException) ->
                 case eta of wild { GHC.Exception.SomeException e10 $dException1 e2 ->
                 case (GHC.Exception.$p1Exception @ e10 $dException1)
                        `cast`
                      (Data.Typeable.Internal.N:Typeable[0] <*>_N <e10>_N)
                        (GHC.Prim.proxy#
                           @ *
                           @ e10) of wild1 { Data.Typeable.Internal.TypeRep dt dt1 ds2 ds3 ds4 ->
                 case SqlTable.$fExceptionDuplicateData2 of wild2 { Data.Typeable.Internal.TypeRep dt2 dt3 ds5 ds6 ds7 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# dt dt2) of wild3 {
                   GHC.Types.False -> GHC.Base.Nothing @ SqlTable.DuplicateData
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# dt1 dt3) of wild4 {
                        GHC.Types.False -> GHC.Base.Nothing @ SqlTable.DuplicateData
                        GHC.Types.True
                        -> GHC.Base.Just
                             @ SqlTable.DuplicateData
                             e2
                               `cast`
                             (UnsafeCo representational e10 SqlTable.DuplicateData) } } } } }) -}
d9a1587c3d6484f5f39620f966997ba9
  $fExceptionDuplicateData_$cp1Exception ::
    Data.Typeable.Internal.Typeable SqlTable.DuplicateData
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                SqlTable.$fExceptionDuplicateData4
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <SqlTable.DuplicateData>_N)) -}
d9a1587c3d6484f5f39620f966997ba9
  $fExceptionDuplicateData_$cshow ::
    SqlTable.DuplicateData -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: SqlTable.DuplicateData) ->
                 case x of wild { SqlTable.DuplicateData ->
                 SqlTable.$fExceptionDuplicateData1 }) -}
d9a1587c3d6484f5f39620f966997ba9
  $fExceptionDuplicateData_$ctoException ::
    SqlTable.DuplicateData -> GHC.Exception.SomeException
  {- Arity: 1 -}
75766b853f4ac76f8cc5c17ef86c6444
  $fFromRowItem ::
    Database.SQLite.Simple.FromRow.FromRow SqlTable.Item
  DFunId
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S(S)L),1*U(1*U(U),1*U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                SqlTable.$fFromRowItem_$cfromRow
                  `cast`
                (Sym (Database.SQLite.Simple.FromRow.N:FromRow[0]) <SqlTable.Item>_N) -}
75766b853f4ac76f8cc5c17ef86c6444
  $fFromRowItem1 ::
    Database.SQLite.Simple.Internal.RowParseRO
    -> (GHC.Types.Int, [Database.SQLite3.SQLData])
    -> Database.SQLite.Simple.Ok.Ok
         (SqlTable.Item, (GHC.Types.Int, [Database.SQLite3.SQLData]))
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S(S)L),1*U(1*U(U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Database.SQLite.Simple.Internal.RowParseRO)
                   (w1 :: (GHC.Types.Int, [Database.SQLite3.SQLData])) ->
                 case w `cast`
                      (Database.SQLite.Simple.Internal.N:RowParseRO[0]) of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { (,) ww3 ww4 ->
                 case ww3 of ww5 { GHC.Types.I# ww6 ->
                 SqlTable.$w$cfromRow ww1 ww6 ww4 } } }) -}
75766b853f4ac76f8cc5c17ef86c6444
  $fFromRowItem_$cfromRow ::
    Database.SQLite.Simple.Internal.RowParser SqlTable.Item
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S(S)L),1*U(1*U(U),1*U)>,
     Unfolding: InlineRule (0, True, True)
                SqlTable.$fFromRowItem1
                  `cast`
                (Trans
                     (<Database.SQLite.Simple.Internal.RowParseRO>_R
                      ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                    <(GHC.Types.Int, [Database.SQLite3.SQLData])>_N
                                    <Database.SQLite.Simple.Ok.Ok>_R
                                    <SqlTable.Item>_N))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <Database.SQLite.Simple.Internal.RowParseRO>_R
                                    <Control.Monad.Trans.State.Strict.StateT
                                       (GHC.Types.Int, [Database.SQLite3.SQLData])
                                       Database.SQLite.Simple.Ok.Ok>_R
                                    <SqlTable.Item>_N))
                          (Sym (Database.SQLite.Simple.Internal.N:RowParser[0]) <SqlTable.Item>_N))) -}
d9a1587c3d6484f5f39620f966997ba9
  $fShowDuplicateData :: GHC.Show.Show SqlTable.DuplicateData
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SqlTable.DuplicateData
                  SqlTable.$fShowDuplicateData_$cshowsPrec
                  SqlTable.$fExceptionDuplicateData_$cshow
                  SqlTable.$fShowDuplicateData_$cshowList -}
d9a1587c3d6484f5f39620f966997ba9
  $fShowDuplicateData1 :: SqlTable.DuplicateData -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*H><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: SqlTable.DuplicateData) (eta :: GHC.Base.String) ->
                 case ds of wild { SqlTable.DuplicateData ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      SqlTable.$fExceptionDuplicateData1)
                   eta }) -}
d9a1587c3d6484f5f39620f966997ba9
  $fShowDuplicateData_$cshowList ::
    [SqlTable.DuplicateData] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ SqlTable.DuplicateData
                   SqlTable.$fShowDuplicateData1) -}
d9a1587c3d6484f5f39620f966997ba9
  $fShowDuplicateData_$cshowsPrec ::
    GHC.Types.Int -> SqlTable.DuplicateData -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*H><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: SqlTable.DuplicateData)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild { SqlTable.DuplicateData ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      SqlTable.$fExceptionDuplicateData1)
                   eta }) -}
75766b853f4ac76f8cc5c17ef86c6444
  $fShowItem :: GHC.Show.Show SqlTable.Item
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SqlTable.Item
                  SqlTable.$fShowItem_$cshowsPrec
                  SqlTable.$fShowItem_$cshow
                  SqlTable.$fShowItem_$cshowList -}
75766b853f4ac76f8cc5c17ef86c6444
  $fShowItem1 :: SqlTable.Item -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: SqlTable.Item)
                   (s :: GHC.Base.String)[OneShot] ->
                 case x of ww { SqlTable.Item ww1 ww2 ->
                 GHC.Base.++ @ GHC.Types.Char (SqlTable.$w$cshow ww1 ww2) s }) -}
10ea9d07bf843f4e9a6bbf5727305af7
  $fShowItem2 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# ' '#) -}
17d0acbaf5b84141c7796aaf95eda342
  $fShowItem3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Item"#) -}
75766b853f4ac76f8cc5c17ef86c6444
  $fShowItem_$cshow :: SqlTable.Item -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U,U,U))>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: SqlTable.Item) ->
                 case w of ww { SqlTable.Item ww1 ww2 ->
                 SqlTable.$w$cshow ww1 ww2 }) -}
75766b853f4ac76f8cc5c17ef86c6444
  $fShowItem_$cshowList :: [SqlTable.Item] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [SqlTable.Item]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ SqlTable.Item SqlTable.$fShowItem1 ls s) -}
75766b853f4ac76f8cc5c17ef86c6444
  $fShowItem_$cshowsPrec ::
    GHC.Types.Int -> SqlTable.Item -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U(U,1*U(U,U,U))><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: SqlTable.Item)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (SqlTable.$fShowItem_$cshow x))
                   s) -}
75766b853f4ac76f8cc5c17ef86c6444
  $fToRowItem :: Database.SQLite.Simple.ToRow.ToRow SqlTable.Item
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,U)>m2,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                SqlTable.$fToRowItem_$ctoRow
                  `cast`
                (Sym (Database.SQLite.Simple.ToRow.N:ToRow[0]
                          <SqlTable.Item>_N)) -}
75766b853f4ac76f8cc5c17ef86c6444
  $fToRowItem_$ctoRow :: SqlTable.Item -> [Database.SQLite3.SQLData]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,U)>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: SqlTable.Item) ->
                 case w of ww { SqlTable.Item ww1 ww2 ->
                 GHC.Types.:
                   @ Database.SQLite3.SQLData
                   (case GHC.Integer.Type.integerToInt ww1 of wild { DEFAULT ->
                    Database.SQLite3.SQLInteger wild })
                   (GHC.Types.:
                      @ Database.SQLite3.SQLData
                      (Database.SQLite3.$WSQLText ww2)
                      (GHC.Types.[] @ Database.SQLite3.SQLData)) }) -}
c73ee2f4398a4297e204a10e09ab1d07
  $tc'DuplicateData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1662320523835204935##
                   18273749587247648819##
                   SqlTable.$trModule
                   SqlTable.$tc'DuplicateData1) -}
debeac3888ad20df96a3c689dc320ca7
  $tc'DuplicateData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DuplicateData"#) -}
a6dbb2c0fb27d207b142f81c85ebbeeb
  $tc'Item :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8840075193645455018##
                   2386642864202474957##
                   SqlTable.$trModule
                   SqlTable.$tc'Item1) -}
c11efc97c5328a7c0f9990a0e8e17a94
  $tc'Item1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Item"#) -}
a1ce119b9736781481c5cc45851dfd95
  $tcDuplicateData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5711934299837864907##
                   17408807711959347684##
                   SqlTable.$trModule
                   SqlTable.$tcDuplicateData1) -}
61658f9a56a22bd720f45e9de594992b
  $tcDuplicateData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DuplicateData"#) -}
9d2f603491f66e97509b7a6281d15ea2
  $tcItem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10487796533649385649##
                   5612514140740450661##
                   SqlTable.$trModule
                   SqlTable.$tcItem1) -}
d541b0819a65e02fbc54b0fcdc8c1416
  $tcItem1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Item"#) -}
5fa865813a8d1778479518bbaaf898b0
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SqlTable.$trModule2
                   SqlTable.$trModule1) -}
3a68932fdf65c3521773a04dc485e9e1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SqlTable"#) -}
7851b6a2be4798f01f4863267bc66b3c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
75766b853f4ac76f8cc5c17ef86c6444
  $w$cfromRow ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Database.SQLite3.SQLData]
    -> Database.SQLite.Simple.Ok.Ok
         (SqlTable.Item, (GHC.Types.Int, [Database.SQLite3.SQLData]))
  {- Arity: 3, Strictness: <S,U><S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: [Database.SQLite3.SQLData]) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww1 ww) of wild {
                   GHC.Types.False
                   -> case ww2 of wild1 {
                        []
                        -> case GHC.List.badHead
                           ret_ty (Database.SQLite.Simple.Ok.Ok
                                     (SqlTable.Item, (GHC.Types.Int, [Database.SQLite3.SQLData])))
                           of {}
                        : x ds1
                        -> case Database.SQLite.Simple.FromField.$w$stakeInt5 x of wild2 {
                             Database.SQLite.Simple.Ok.Errors es
                             -> Database.SQLite.Simple.Ok.Errors
                                  @ (SqlTable.Item, (GHC.Types.Int, [Database.SQLite3.SQLData]))
                                  es
                             Database.SQLite.Simple.Ok.Ok a1
                             -> let {
                                  s' :: GHC.Prim.Int# = GHC.Prim.+# ww1 1#
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.>=# s' ww) of wild3 {
                                  GHC.Types.False
                                  -> case ds1 of wild4 {
                                       []
                                       -> case GHC.List.badHead
                                          ret_ty (Database.SQLite.Simple.Ok.Ok
                                                    (SqlTable.Item,
                                                     (GHC.Types.Int, [Database.SQLite3.SQLData])))
                                          of {}
                                       : x1 ds2
                                       -> case Database.SQLite.Simple.FromField.$w$cfromField9
                                                 x1 of wild5 {
                                            Database.SQLite.Simple.Ok.Errors es
                                            -> Database.SQLite.Simple.Ok.Errors
                                                 @ (SqlTable.Item,
                                                    (GHC.Types.Int, [Database.SQLite3.SQLData]))
                                                 es
                                            Database.SQLite.Simple.Ok.Ok a2
                                            -> Database.SQLite.Simple.Ok.Ok
                                                 @ (SqlTable.Item,
                                                    (GHC.Types.Int, [Database.SQLite3.SQLData]))
                                                 (SqlTable.Item a1 a2,
                                                  (GHC.Types.I# (GHC.Prim.+# s' 1#), ds2)) } }
                                  GHC.Types.True
                                  -> Database.SQLite.Simple.Ok.Errors
                                       @ (SqlTable.Item,
                                          (GHC.Types.Int, [Database.SQLite3.SQLData]))
                                       (GHC.Types.:
                                          @ GHC.Exception.SomeException
                                          (GHC.Exception.SomeException
                                             @ Database.SQLite.Simple.Internal.ColumnOutOfBounds
                                             Database.SQLite.Simple.Internal.$fExceptionColumnOutOfBounds
                                             (Database.SQLite.Simple.Internal.ColumnOutOfBounds
                                                (GHC.Prim.+# s' 1#)))
                                          (GHC.Types.[] @ GHC.Exception.SomeException)) } } }
                   GHC.Types.True
                   -> Database.SQLite.Simple.Ok.Errors
                        @ (SqlTable.Item, (GHC.Types.Int, [Database.SQLite3.SQLData]))
                        (GHC.Types.:
                           @ GHC.Exception.SomeException
                           (GHC.Exception.SomeException
                              @ Database.SQLite.Simple.Internal.ColumnOutOfBounds
                              Database.SQLite.Simple.Internal.$fExceptionColumnOutOfBounds
                              (Database.SQLite.Simple.Internal.ColumnOutOfBounds
                                 (GHC.Prim.+# ww1 1#)))
                           (GHC.Types.[] @ GHC.Exception.SomeException)) }) -}
35716a9e9ed4e2ea991a09c8f0d0465b
  $w$cshow ::
    GHC.Integer.Type.Integer
    -> Data.Text.Internal.Text -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,1*U(U,U,U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: Data.Text.Internal.Text) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   SqlTable.$fShowItem3
                   (GHC.Types.:
                      @ GHC.Types.Char
                      SqlTable.$fShowItem2
                      (case GHC.Show.$w$cshowsPrec1
                              0#
                              ww
                              (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                       GHC.Base.++
                         @ GHC.Types.Char
                         (GHC.Types.: @ GHC.Types.Char ww3 ww4)
                         (GHC.Types.:
                            @ GHC.Types.Char
                            SqlTable.$fShowItem2
                            (case Data.Text.Show.$w$cshow ww1 of ww5 { (#,#) ww6 ww7 ->
                             GHC.Base.++
                               @ GHC.Types.Char
                               (GHC.Types.: @ GHC.Types.Char ww6 ww7)
                               (GHC.Types.[] @ GHC.Types.Char) })) }))) -}
271f2ad00b319d2b7169e11cb7d92f5c
  $w$dToRow ::
    [GHC.Types.Char]
    -> (# Database.SQLite3.SQLData, [Database.SQLite3.SQLData] #)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Types.Char]) ->
                 (# Database.SQLite3.SQLNull,
                    GHC.Types.:
                      @ Database.SQLite3.SQLData
                      (case GHC.Magic.runRW#
                              @ 'GHC.Types.PtrRepLifted
                              @ Data.Text.Internal.Text
                              (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case GHC.Prim.newByteArray#
                                      @ GHC.Prim.RealWorld
                                      8#
                                      s1 of ds1 { (#,#) ipv ipv1 ->
                               SqlTable.$wouter
                                 (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                                 SqlTable.fillDatabase3
                                 ww
                                 0#
                                 ipv }) of ds1 { (#,#) ipv ipv1 ->
                       case ipv1 of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                       Database.SQLite3.SQLText dt } })
                      (GHC.Types.[] @ Database.SQLite3.SQLData) #)) -}
fca118f708bfb19797ee9a541782c976
  $wfail ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <B,U>x, Inline: [0] -}
62f8862a3d681bf0fea8281e198ea936
  $wouter ::
    Data.Text.Array.MArray GHC.Prim.RealWorld
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U(U)><L,U(U)><S,1*U><S,U><S,U>,
     Inline: [0] -}
d9a1587c3d6484f5f39620f966997ba9
  data DuplicateData = DuplicateData
75766b853f4ac76f8cc5c17ef86c6444
  data Item
    = Item {itemId :: GHC.Integer.Type.Integer,
            content :: Data.Text.Internal.Text}
3889d9530093f891e85f435c8b893cd4
  content :: SqlTable.Item -> Data.Text.Internal.Text
  RecSel Left SqlTable.Item
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: SqlTable.Item) ->
                 case ds of wild { SqlTable.Item ds1 ds2 -> ds2 }) -}
d28d70a869b07a5075fbd33e8dfc3e99
  createDatabase :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                SqlTable.createDatabase1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
2c3ba962dd4d19e39e233c6692f8b523
  createDatabase1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Database.SQLite.Simple.open1
                        SqlTable.tblname
                        s of ds1 { (#,#) ipv ipv1 ->
                 case SqlTable.createDatabase2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Database.SQLite.Simple.$wexecute_
                        ipv1
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Database.SQLite3.close1
                   ipv1 `cast` (Database.SQLite.Simple.Internal.N:Connection[0])
                   ipv2 } } }) -}
fd23bbc7147aba7d426c172579c1a2b0
  createDatabase2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\n\
                   \CREATE TABLE IF NOT EXISTS items\n\
                   \  (id INTEGER PRIMARY KEY AUTOINCREMENT,\n\
                   \   content TEXT UNIQUE)\n"#) -}
f0ca7f92895639ce77a4069e3507a208
  createItems :: Database.SQLite.Simple.Types.Query
  {- Unfolding: InlineRule (0, True, True)
                SqlTable.createDatabase2
                  `cast`
                (Sym (Database.SQLite.Simple.Types.N:Query[0])) -}
c18116e64892e0139a4ad009e7a39958
  fillDatabase :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                SqlTable.fillDatabase1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
b3171c0e45725de26b28cce2482ded00
  fillDatabase1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Database.SQLite.Simple.open1
                        SqlTable.tblname
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openFile1
                        SqlTable.fname
                        GHC.IO.IOMode.ReadMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 letrec {
                   go :: [[GHC.Types.Char]]
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2, Strictness: <S,1*U><S,U> -}
                   = \ (ds :: [[GHC.Types.Char]])
                       (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ds of wild {
                       [] -> (# eta, GHC.Tuple.() #)
                       : y ys
                       -> case SqlTable.fillDatabase4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          case Database.SQLite.Simple.$wwithStatementParams
                                 @ (Database.SQLite.Simple.Types.Null, GHC.Base.String)
                                 @ ()
                                 SqlTable.fillDatabase2
                                   `cast`
                                 (Sym (Database.SQLite.Simple.ToRow.N:ToRow[0]
                                           <(Database.SQLite.Simple.Types.Null,
                                             [GHC.Types.Char])>_N))
                                 ipv1
                                 ww1
                                 ww2
                                 ww3
                                 (Database.SQLite.Simple.Types.Null, SqlTable.stripS y)
                                 Database.SQLite.Simple.execute2
                                   `cast`
                                 (<Database.SQLite.Simple.Statement>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                 eta of ds4 { (#,#) ipv6 ipv7 ->
                          go ys ipv6 } } }
                 } in
                 case go (Data.OldList.lines ipv5) ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 Database.SQLite3.close1
                   ipv1 `cast` (Database.SQLite.Simple.Internal.N:Connection[0])
                   ipv6 } } } }) -}
2c5d4ef15a8fb9b701d01c7db73aa28f
  fillDatabase2 ::
    (Database.SQLite.Simple.Types.Null, [GHC.Types.Char])
    -> [Database.SQLite3.SQLData]
  {- Arity: 1, Strictness: <S,1*U(A,1*U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Database.SQLite.Simple.Types.Null, [GHC.Types.Char])) ->
                 case w of ww { (,) ww1 ww2 ->
                 case SqlTable.$w$dToRow ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Types.: @ Database.SQLite3.SQLData ww4 ww5 } }) -}
95c673cff754c814bac654412cd9e0e5
  fillDatabase3 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 4#) -}
d00e754bb7845b97a9bcecb878a9aa4c
  fillDatabase4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "INSERT INTO items VALUES (?, ?)"#) -}
e6e09ac98b164e41d29564d23ed776af
  fname :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "happythings_form.txt"#) -}
ec8438fb2fabd900aa4796bcb8261783
  getCount ::
    Database.SQLite.Simple.Internal.Connection
    -> GHC.Types.IO GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                SqlTable.getCount1
                  `cast`
                (<Database.SQLite.Simple.Internal.Connection>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Integer.Type.Integer>_R)) -}
f0ee5325c68f1464ee1fd3c921d2d0d5
  getCount1 ::
    Database.SQLite.Simple.Internal.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Integer.Type.Integer #)
  {- Arity: 2, Strictness: <L,U(U)><S,U>,
     Unfolding: (\ (conn :: Database.SQLite.Simple.Internal.Connection)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case SqlTable.getCount3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Database.SQLite.Simple.$wqueryWith_
                        @ [GHC.Integer.Type.Integer]
                        SqlTable.getCount2
                          `cast`
                        (Trans
                             (<Database.SQLite.Simple.Internal.RowParseRO>_R
                              ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                            <(GHC.Types.Int, [Database.SQLite3.SQLData])>_N
                                            <Database.SQLite.Simple.Ok.Ok>_R
                                            <[GHC.Integer.Type.Integer]>_N))
                             (Trans
                                  (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                            <*>_N
                                            <Database.SQLite.Simple.Internal.RowParseRO>_R
                                            <Control.Monad.Trans.State.Strict.StateT
                                               (GHC.Types.Int, [Database.SQLite3.SQLData])
                                               Database.SQLite.Simple.Ok.Ok>_R
                                            <[GHC.Integer.Type.Integer]>_N))
                                  (Sym (Database.SQLite.Simple.Internal.N:RowParser[0]) <[GHC.Integer.Type.Integer]>_N)))
                        conn
                        ww1
                        ww2
                        ww3
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   [] -> SqlTable.$wfail ipv
                   : ds ds2
                   -> case ds of wild1 {
                        [] -> SqlTable.$wfail ipv
                        : c ds3
                        -> case ds3 of wild2 {
                             []
                             -> case ds2 of wild3 {
                                  [] -> (# ipv, c #) : ipv2 ipv3 -> SqlTable.$wfail ipv }
                             : ipv2 ipv3 -> SqlTable.$wfail ipv } } } } }) -}
4b37bac152b46ec9d3d06dc6a351af64
  getCount2 ::
    Database.SQLite.Simple.Internal.RowParseRO
    -> (GHC.Types.Int, [Database.SQLite3.SQLData])
    -> Database.SQLite.Simple.Ok.Ok
         ([GHC.Integer.Type.Integer],
          (GHC.Types.Int, [Database.SQLite3.SQLData]))
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S(S)L),1*U(1*U(U),U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: Database.SQLite.Simple.Internal.RowParseRO)
                   (w2 :: (GHC.Types.Int, [Database.SQLite3.SQLData])) ->
                 case w1
                        `cast`
                      (Database.SQLite.Simple.Internal.N:RowParseRO[0]) of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { (,) ww3 ww4 ->
                 case ww3 of ww5 { GHC.Types.I# ww6 ->
                 Database.SQLite.Simple.FromRow.$w$cfromRow9
                   @ GHC.Integer.Type.Integer
                   Database.SQLite.Simple.FromField.$fFromFieldInteger_$stakeInt
                     `cast`
                   (Sym (Database.SQLite.Simple.FromField.N:FromField[0]
                             <GHC.Integer.Type.Integer>_N))
                   ww1
                   ww6
                   ww4 } } }) -}
e14323be3af1044656c925f49762a6e3
  getCount3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "SELECT COUNT(*) FROM items"#) -}
a4ac890382fe2f162ff028cffdc99e81
  getItem ::
    Database.SQLite.Simple.Internal.Connection
    -> GHC.Integer.Type.Integer
    -> GHC.Types.IO (GHC.Base.Maybe SqlTable.Item)
  {- Arity: 3, Strictness: <L,U(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                SqlTable.getItem1
                  `cast`
                (<Database.SQLite.Simple.Internal.Connection>_R
                 ->_R <GHC.Integer.Type.Integer>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe SqlTable.Item>_R)) -}
55871e216e8220001ea15fe2dba633f7
  getItem1 ::
    Database.SQLite.Simple.Internal.Connection
    -> GHC.Integer.Type.Integer
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe SqlTable.Item #)
  {- Arity: 3, Strictness: <L,U(U)><L,U><S,U>,
     Unfolding: (\ (conn :: Database.SQLite.Simple.Internal.Connection)
                   (id_ :: GHC.Integer.Type.Integer)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case SqlTable.getItem4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Database.SQLite.Simple.$wquery
                        @ (Database.SQLite.Simple.Types.Only GHC.Integer.Type.Integer)
                        @ SqlTable.Item
                        SqlTable.getItem3
                          `cast`
                        (Sym (Database.SQLite.Simple.ToRow.N:ToRow[0]
                                  <Database.SQLite.Simple.Types.Only GHC.Integer.Type.Integer>_N))
                        SqlTable.$fFromRowItem1
                          `cast`
                        (Trans
                             (<Database.SQLite.Simple.Internal.RowParseRO>_R
                              ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                            <(GHC.Types.Int, [Database.SQLite3.SQLData])>_N
                                            <Database.SQLite.Simple.Ok.Ok>_R
                                            <SqlTable.Item>_N))
                             (Trans
                                  (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                            <*>_N
                                            <Database.SQLite.Simple.Internal.RowParseRO>_R
                                            <Control.Monad.Trans.State.Strict.StateT
                                               (GHC.Types.Int, [Database.SQLite3.SQLData])
                                               Database.SQLite.Simple.Ok.Ok>_R
                                            <SqlTable.Item>_N))
                                  (Trans
                                       (Sym (Database.SQLite.Simple.Internal.N:RowParser[0]))
                                       (Sym (Database.SQLite.Simple.FromRow.N:FromRow[0])) <SqlTable.Item>_N)))
                        conn
                        ww1
                        ww2
                        ww3
                        id_
                          `cast`
                        (Sym (Database.SQLite.Simple.Types.N:Only[0]
                                  <GHC.Integer.Type.Integer>_R))
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   [] -> (# ipv, GHC.Base.Nothing @ SqlTable.Item #)
                   : item ds
                   -> case ds of wild1 {
                        [] -> (# ipv, GHC.Base.Just @ SqlTable.Item item #)
                        : ipv2 ipv3
                        -> GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ (GHC.Base.Maybe SqlTable.Item)
                             SqlTable.getItem2
                             ipv } } } }) -}
eef4edba271ed69323f1722876aea1c0
  getItem2 :: GHC.Exception.SomeException
  {- Unfolding: (SqlTable.$fExceptionDuplicateData_$ctoException
                   SqlTable.DuplicateData) -}
5941fc2045f6f0eec906927cb650db23
  getItem3 ::
    Database.SQLite.Simple.Types.Only GHC.Integer.Type.Integer
    -> [Database.SQLite3.SQLData]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Database.SQLite.Simple.Types.Only
                            GHC.Integer.Type.Integer) ->
                 GHC.Types.:
                   @ Database.SQLite3.SQLData
                   (case GHC.Integer.Type.integerToInt
                           ds
                             `cast`
                           (Database.SQLite.Simple.Types.N:Only[0]
                                <GHC.Integer.Type.Integer>_R) of wild { DEFAULT ->
                    Database.SQLite3.SQLInteger wild })
                   (GHC.Types.[] @ Database.SQLite3.SQLData)) -}
0b88a80ade1e6668e16e3350158e55cb
  getItem4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "SELECT * FROM items WHERE id = ?"#) -}
8ab510679623b927ad53d0e2a79c03a5
  getItemQ :: Database.SQLite.Simple.Types.Query
  {- Unfolding: InlineRule (0, True, True)
                SqlTable.getItem4
                  `cast`
                (Sym (Database.SQLite.Simple.Types.N:Query[0])) -}
4baebd96f6a9298f340e31019838c54a
  getRandItem ::
    Database.SQLite.Simple.Internal.Connection
    -> GHC.Types.IO (GHC.Base.Maybe SqlTable.Item)
  {- Arity: 2, Strictness: <L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                SqlTable.getRandItem1
                  `cast`
                (<Database.SQLite.Simple.Internal.Connection>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe SqlTable.Item>_R)) -}
93b1bbd18b99d166cc25ce94074fb3c8
  getRandItem1 ::
    Database.SQLite.Simple.Internal.Connection
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe SqlTable.Item #)
  {- Arity: 2, Strictness: <L,U(U)><S,U>,
     Unfolding: (\ (conn :: Database.SQLite.Simple.Internal.Connection)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case SqlTable.getCount3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Database.SQLite.Simple.$wqueryWith_
                        @ [GHC.Integer.Type.Integer]
                        SqlTable.getCount2
                          `cast`
                        (Trans
                             (<Database.SQLite.Simple.Internal.RowParseRO>_R
                              ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                            <(GHC.Types.Int, [Database.SQLite3.SQLData])>_N
                                            <Database.SQLite.Simple.Ok.Ok>_R
                                            <[GHC.Integer.Type.Integer]>_N))
                             (Trans
                                  (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                            <*>_N
                                            <Database.SQLite.Simple.Internal.RowParseRO>_R
                                            <Control.Monad.Trans.State.Strict.StateT
                                               (GHC.Types.Int, [Database.SQLite3.SQLData])
                                               Database.SQLite.Simple.Ok.Ok>_R
                                            <[GHC.Integer.Type.Integer]>_N))
                                  (Sym (Database.SQLite.Simple.Internal.N:RowParser[0]) <[GHC.Integer.Type.Integer]>_N)))
                        conn
                        ww1
                        ww2
                        ww3
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   []
                   -> case SqlTable.$wfail ipv
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                GHC.Base.Maybe SqlTable.Item #)
                      of {}
                   : ds ds2
                   -> case ds of wild1 {
                        []
                        -> case SqlTable.$wfail ipv
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     GHC.Base.Maybe SqlTable.Item #)
                           of {}
                        : c ds3
                        -> case ds3 of wild2 {
                             []
                             -> case ds2 of wild3 {
                                  []
                                  -> case System.Random.$fRandomInteger3
                                            (SqlTable.getRandItem2, c)
                                            ipv of ds4 { (#,#) ipv2 ipv3 ->
                                     SqlTable.getItem1 conn ipv3 ipv2 }
                                  : ipv2 ipv3
                                  -> case SqlTable.$wfail ipv
                                     ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               GHC.Base.Maybe SqlTable.Item #)
                                     of {} }
                             : ipv2 ipv3
                             -> case SqlTable.$wfail ipv
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                          GHC.Base.Maybe SqlTable.Item #)
                                of {} } } } } }) -}
bdfc037b14ccbb9bf7d334f66cc1cf21
  getRandItem2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
cbbfc260c2695ae37cedff434b21aff3
  getRandItems ::
    Database.SQLite.Simple.Internal.Connection
    -> GHC.Types.Int -> GHC.Types.IO [GHC.Base.Maybe SqlTable.Item]
  {- Arity: 3, Strictness: <L,U(U)><L,1*U(U)>,
     Unfolding: (SqlTable.getRandItems1
                   `cast`
                 (<Database.SQLite.Simple.Internal.Connection>_R
                  ->_R <GHC.Types.Int>_R
                  ->_R Sym (GHC.Types.N:IO[0]
                                <[GHC.Base.Maybe SqlTable.Item]>_R))) -}
97bead791e56912c35d1f976f48aeb2e
  getRandItems1 ::
    Database.SQLite.Simple.Internal.Connection
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [GHC.Base.Maybe SqlTable.Item] #)
  {- Arity: 3, Strictness: <L,U(U)><L,1*U(U)>,
     Unfolding: (\ (conn :: Database.SQLite.Simple.Internal.Connection)
                   (n :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case n of wild1 { GHC.Types.I# y ->
                 letrec {
                   go :: [GHC.Types.Int]
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               [GHC.Base.Maybe SqlTable.Item] #)
                     {- Arity: 2, Strictness: <S,1*U><S,U> -}
                   = \ (ds :: [GHC.Types.Int])
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ds of wild {
                       [] -> (# eta1, GHC.Types.[] @ (GHC.Base.Maybe SqlTable.Item) #)
                       : y1 ys
                       -> case SqlTable.getRandItem1 conn eta1 of ds1 { (#,#) ipv ipv1 ->
                          case go ys ipv of ds2 { (#,#) ipv2 ipv3 ->
                          (# ipv2,
                             GHC.Types.: @ (GHC.Base.Maybe SqlTable.Item) ipv1 ipv3 #) } } }
                 } in
                 go (GHC.Enum.eftInt 1# y) eta }) -}
3df811a863b6f94be68d35e3aa22371d
  insertItemQ :: Database.SQLite.Simple.Types.Query
  {- Unfolding: InlineRule (0, True, True)
                SqlTable.fillDatabase4
                  `cast`
                (Sym (Database.SQLite.Simple.Types.N:Query[0])) -}
7d1e1921c4c1ba89b6e69a9ecda77c31
  itemId :: SqlTable.Item -> GHC.Integer.Type.Integer
  RecSel Left SqlTable.Item
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: SqlTable.Item) ->
                 case ds of wild { SqlTable.Item ds1 ds2 -> ds1 }) -}
bebe96b3cf99c40e3b682af4b153c99f
  stripS :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: GHC.Base.String) ->
                 GHC.List.takeWhile
                   @ GHC.Types.Char
                   SqlTable.stripS1
                   (GHC.List.dropWhile
                      @ GHC.Types.Char
                      GHC.Unicode.isControl
                      (Data.String.Utils.lstrip
                         (GHC.List.reverse1
                            @ GHC.Types.Char
                            (Data.String.Utils.lstrip
                               (GHC.List.reverse1
                                  @ GHC.Types.Char
                                  x
                                  (GHC.Types.[] @ GHC.Types.Char)))
                            (GHC.Types.[] @ GHC.Types.Char))))) -}
667b9972f2fc0519dd2c96600e69452e
  stripS1 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Char) ->
                 case x of wild { GHC.Types.C# c# ->
                 case {__pkg_ccall base-4.9.1.0 u_iswcntrl GHC.Prim.Int#
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 GHC.Prim.Int# #)}
                        (GHC.Prim.ord# c#)
                        GHC.Prim.realWorld# of wild1 { (#,#) ds ds1 ->
                 case ds1 of wild2 {
                   DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } } }) -}
c679d80df2e6e6a6b03d82cb3923e4a3
  tblname :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "happy.db"#) -}
instance GHC.Classes.Eq [SqlTable.DuplicateData]
  = SqlTable.$fEqDuplicateData
instance GHC.Exception.Exception [SqlTable.DuplicateData]
  = SqlTable.$fExceptionDuplicateData
instance Database.SQLite.Simple.FromRow.FromRow [SqlTable.Item]
  = SqlTable.$fFromRowItem
instance GHC.Show.Show [SqlTable.DuplicateData]
  = SqlTable.$fShowDuplicateData
instance GHC.Show.Show [SqlTable.Item] = SqlTable.$fShowItem
instance Database.SQLite.Simple.ToRow.ToRow [SqlTable.Item]
  = SqlTable.$fToRowItem
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

